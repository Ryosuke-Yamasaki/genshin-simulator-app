// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  artifacters   Artifacter[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Artifacter {
  id           String      @id @default(cuid())
  userId       String      @map("user_id")
  artifactId   String      @map("artifact_id")
  mainOptionId String      @map("main_option_id")
  subOptions   SubOption[]

  mainOption MainOption @relation(fields: [mainOptionId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
  artifact   Artifact   @relation(fields: [artifactId], references: [id])

  @@map("artifacters")
}

model Artifact {
  id          String       @id
  setId       String       @map("set_id")
  typeId      String       @map("type_id")
  nameJp      String       @map("name_jp")
  nameEn      String       @map("name_en")
  artifacters Artifacter[]

  set  ArtifactSet  @relation(fields: [setId], references: [id])
  type ArtifactType @relation(fields: [typeId], references: [id])

  @@map("artifacts")
}

model ArtifactSet {
  id        String     @id
  nameJp    String     @map("name_jp")
  nameEn    String     @map("name_en")
  quality   Int
  artifacts Artifact[]

  @@map("artifact_sets")
}

model ArtifactType {
  id        String     @id
  nameJp    String     @map("name_jp")
  nameEn    String     @map("name_en")
  artifacts Artifact[]

  @@map("artifact_types")
}

model MainOption {
  id          String       @id
  rarity      String
  attribute   String
  value       String
  artifacters Artifacter[]

  @@map("main_options")
}

model SubOption {
  id           String @id @default(cuid())
  artifacterId String @map("artifacter_id")
  attribute    String
  value        String

  artifacter Artifacter @relation(fields: [artifacterId], references: [id])

  @@map("sub_options")
}
